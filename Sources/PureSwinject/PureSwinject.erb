<% puts "// WARNING: This swift file is auto generated. Don't modify this file directly.\n\n" %>
<% arguments = 1..20 %>
@_exported import Pure
@_exported import Swinject
@_exported import SwinjectSafeAuto

public extension Container {
<% for i in arguments %>
<% args = (1..i).map { |j| "Arg#{j}" }.join(", ") %>
  func autoregister<Module, <%= args %>>(_ factory: Factory<Module>.Type, dependency: @escaping ((<%= args %>)) -> Module.Dependency) where Module: FactoryModule {
<% if i == 1 %>
    if Arg1.self == Void.self {
      self.register(Void.self) { _ in Void() }
    }
<% end %>
    let resolver = self.synchronize()
    self.autoregister(Module.Dependency.self, initializer: dependency).inObjectScope(.container)
    self.register((() -> Module.Dependency).self) { _ in { resolver.resolve(Module.Dependency.self)! } }.inObjectScope(.container)
    self.autoregister(Factory<Module>.self, initializer: Factory<Module>.init).inObjectScope(.container)
  }

<% end %>
}

public extension Container {
<% for i in arguments %>
<% args = (1..i).map { |j| "Arg#{j}" }.join(", ") %>
  func autoregister<Module, <%= args %>>(_ configurator: Configurator<Module>.Type, dependency: @escaping ((<%= args %>)) -> Module.Dependency) where Module: ConfiguratorModule {
<% if i == 1 %>
    if Arg1.self == Void.self {
      self.register(Void.self) { _ in Void() }
    }
<% end %>
    let resolver = self.synchronize()
    self.autoregister(Module.Dependency.self, initializer: dependency).inObjectScope(.container)
    self.register((() -> Module.Dependency).self) { _ in { resolver.resolve(Module.Dependency.self)! } }.inObjectScope(.container)
    self.autoregister(Configurator<Module>.self, initializer: Configurator<Module>.init).inObjectScope(.container)
  }

<% end %>
}
