<% puts "// WARNING: This swift file is auto generated. Don't modify this file directly.\n\n" %>
<% arguments = 0..20 %>
import XCTest
import PureSwinject

final class PureSwinjectTest: XCTestCase {
  private var container: Container!

  override func setUp() {
    super.setUp()
    self.container = Container()
<% for i in arguments %>
    self.container.autoregister(Dep<%= i %>.Factory.self, dependency: Dep<%= i %>.Dependency.init)
    self.container.autoregister(Dep<%= i %>.Configurator.self, dependency: Dep<%= i %>.Dependency.init)
    self.container.autoregister(GenericDep<%= i %>Protocol.Factory.self, initializer: GenericDep<%= i %>.init, dependency: GenericDep<%= i %>.Dependency.init)
<% end %>
  }

  func testVerify() {
    XCTAssertNoThrow(try self.container.verify())
  }
<% for i in arguments %>

  func testDep<%= i %>() {
    XCTAssertNotNil(self.container.resolve(Dep<%= i %>.Factory.self))
    XCTAssertNotNil(self.container.resolve(Dep<%= i %>.Configurator.self))
    XCTAssertNotNil(self.container.resolve(GenericDep<%= i %>Protocol.Factory.self))
  }
<% end %>

<% for i in 1..arguments.max %>

  func testDep<%= i %>ThreadSafety() {
    let expectation = XCTestExpectation()
    let total: Int = 10

    let lock = NSLock()
    var count: Int = 0

    let resolver = self.container.synchronize()

    for _ in 0..<total {
      DispatchQueue.global().async {
        let factory = resolver.resolve(Dep<%= i %>.Factory.self)!
        let object = factory.create()

        let configurator = resolver.resolve(Dep<%= i %>.Configurator.self)!
        configurator.configure(object)

        let genericFactory = resolver.resolve(GenericDep<%= i %>.Factory.self)!
        let genericObject = genericFactory.create()

        DispatchQueue.global().async {
<% for j in 0...i %>
          _ = object.dependency.dep<%= j %>.create()
          _ = genericObject.dependency.dep<%= j %>.create()
<% end %>

          lock.lock()
          count += 1
          defer{ lock.unlock() }

          if count == total {
            expectation.fulfill()
          }
        }
      }
    }

    XCTWaiter().wait(for: [expectation], timeout: 3)
  }
<% end %>
}
<% for i in arguments %>

private final class Dep<%= i%>: FactoryModule, ConfiguratorModule {
  struct Dependency {
<% for j in 0...i %>
    let dep<%= j %>: Dep<%= j %>.Factory
<% end %>
  }

  var dependency: Dependency

  init(dependency: Dependency, payload: Payload) {
    self.dependency = dependency
  }

  func configure(dependency: Dependency, payload: Payload) {
    self.dependency = dependency
  }
}
<% end %>

<% for i in arguments %>

private protocol GenericDep<%= i%>Protocol {
  typealias Factory = GenericFactory<GenericDep<%= i%>Protocol, Payload>
  typealias Payload = Void

  var dependency: GenericDep<%= i%>.Dependency { get }
}

private final class GenericDep<%= i%>: GenericDep<%= i%>Protocol {
  struct Dependency {
<% for j in 0...i %>
    let dep<%= j %>: GenericDep<%= j %>Protocol.Factory
<% end %>
  }

  var dependency: Dependency

  init(dependency: Dependency, payload: Payload) {
    self.dependency = dependency
  }
}
<% end %>
